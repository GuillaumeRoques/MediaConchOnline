# you can read more about security in the related section of the documentation
# http://symfony.com/doc/current/book/security.html
security:
    # Refresh authenticated user after role change
    always_authenticate_before_granting:  true
    # http://symfony.com/doc/current/book/security.html#encoding-the-user-s-password
    encoders:
        FOS\UserBundle\Model\UserInterface: bcrypt

    # http://symfony.com/doc/current/book/security.html#hierarchical-roles
    role_hierarchy:
        ROLE_BOT:         ROLE_USER
        ROLE_GUEST:       ROLE_USER
        ROLE_BASIC:       ROLE_USER
        ROLE_ADMIN:       ROLE_BASIC
        ROLE_SUPER_ADMIN: ROLE_ADMIN

    # http://symfony.com/doc/current/book/security.html#where-do-users-come-from-user-providers
    providers:
        fos_userbundle:
            id: fos_user.user_provider.username_email
        api_key_user_provider:
            id: api_key_user_provider

#        in_memory:
#            memory:
#                users:
#                    user:  { password: userpass, roles: [ 'ROLE_USER' ] }
#                    admin: { password: adminpass, roles: [ 'ROLE_ADMIN' ] }

    # the main part of the security, where you can set up firewalls
    # for specific sections of your app
    firewalls:
        # disables authentication for assets and the profiler, adapt it according to your needs
        dev:
            pattern:  ^/(_(profiler|wdt)|css|images|js)/
            security: false

#        default:
#            anonymous: ~

        # Firewall for public API
        public_api:
            pattern: ^/api/public/
            stateless: true
            security: false

        # Firewall for protected API
        protected_api:
            pattern: ^/api/protected/
            stateless: true
            simple_preauth:
                authenticator: apikey_authenticator
            provider: api_key_user_provider

        main:
            pattern: ^/
            form_login:
                provider: fos_userbundle
                csrf_token_generator: security.csrf.token_manager
                default_target_path: /
                login_path: /login
                check_path: /login_check
            logout:
                path:   /logout
                target: /
            anonymous:    true
            remember_me:
                secret: '%secret%'
                lifetime: 2592000 # 30 days in seconds
                always_remember_me: false

    # with these settings you can restrict or allow access for different parts
    # of your application based on roles, ip, host or methods
    # http://symfony.com/doc/current/cookbook/security/access_control.html
    access_control:
        #- { path: ^/login, roles: IS_AUTHENTICATED_ANONYMOUSLY, requires_channel: https }
        - { path: ^/$, role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/login$, role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/register, role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/resetting, role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/profile/edit, role: ROLE_BASIC, methods: [POST]}
        - { path: ^/profile/change-password, role: ROLE_BASIC, methods: [POST]}
        - { path: ^/admin/, role: ROLE_ADMIN }
        - { path: ^/api/protected/, role: ROLE_BASIC }
        #- { path: ^/, role: ROLE_USER }
