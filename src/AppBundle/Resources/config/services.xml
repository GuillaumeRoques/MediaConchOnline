<?xml version="1.0" ?>

<container xmlns="http://symfony.com/schema/dic/services"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://symfony.com/schema/dic/services http://symfony.com/schema/dic/services/services-1.0.xsd">

    <services>
        <service id="mediaconch_user.registration.form.type" class="AppBundle\Form\Type\RegistrationFormType">
            <tag name="form.type" alias="mediaconch_user_registration" />
            <argument>%fos_user.model.user.class%</argument>
        </service>

        <service id="mediaconch_user.profile.form.type" class="AppBundle\Form\Type\ProfileFormType">
            <tag name="form.type" alias="mediaconch_user_profile" />
            <argument>%fos_user.model.user.class%</argument>
        </service>

        <service id="mediaconch_user.quotas" class="AppBundle\Lib\Quotas\Quotas">
            <argument type="service" id="security.token_storage" />
            <argument type="service" id="doctrine.orm.entity_manager" />
            <argument type="service" id="mco.policy.getPoliciesCount" />
            <argument>%app.mediaconch.quotas%</argument>
        </service>

        <service id="app.form.type.professional" class="AppBundle\Form\Type\ProfessionalType">
            <tag name="form.type" alias="professional" />
        </service>

        <service id="app.form.type.entity.disables" class="AppBundle\Form\Type\EntityDisabledType">
            <tag name="form.type" alias="entity_disabled" />
        </service>

        <service id="app.form.type.country.custom" class="AppBundle\Form\Type\CountryCustomType">
            <tag name="form.type" alias="country_custom" />
        </service>

        <service id="app.form.type.language.custom" class="AppBundle\Form\Type\LanguageCustomType">
            <tag name="form.type" alias="language_custom" />
        </service>

        <service id="app.form.type.checker.upload" class="AppBundle\Form\Type\CheckerUploadFormType">
            <tag name="form.type" alias="checkerUpload" />
            <argument type="service" id="security.token_storage" />
            <argument type="service" id="doctrine.orm.entity_manager" />
            <argument type="service" id="mco.settings" />
            <argument type="service" id="mco.policy.getPoliciesNamesList"/>
        </service>

        <service id="app.form.type.checker.online" class="AppBundle\Form\Type\CheckerOnlineFormType">
            <tag name="form.type" alias="checkerOnline" />
            <argument type="service" id="security.token_storage" />
            <argument type="service" id="doctrine.orm.entity_manager" />
            <argument type="service" id="mco.settings" />
            <argument type="service" id="mco.policy.getPoliciesNamesList"/>
        </service>

        <service id="app.form.type.checker.repository" class="AppBundle\Form\Type\CheckerRepositoryFormType">
            <tag name="form.type" alias="checkerRepository" />
            <argument type="service" id="security.token_storage" />
            <argument type="service" id="doctrine.orm.entity_manager" />
            <argument type="service" id="mco.settings" />
            <argument type="service" id="mco.policy.getPoliciesNamesList"/>
        </service>

        <service id="app.form.type.settings" class="AppBundle\Form\Type\SettingsFormType">
            <tag name="form.type" alias="settings" />
            <argument type="service" id="security.token_storage" />
            <argument type="service" id="doctrine.orm.entity_manager" />
            <argument type="service" id="mco.settings" />
            <argument type="service" id="mco.policy.getPoliciesNamesList"/>
        </service>

        <service id="app.form.type.policy.import" class="AppBundle\Form\Type\XslPolicyImportFormType">
            <tag name="form.type" alias="xslPolicyImport" />
        </service>

        <service id="app.form.type.policy.info" class="AppBundle\Form\Type\XslPolicyInfoFormType">
            <tag name="form.type" alias="xslPolicyInfo" />
        </service>

        <service id="app.form.type.policy.rule" class="AppBundle\Form\Type\XslPolicyRuleFormType">
            <tag name="form.type" alias="xslPolicyRule" />
        </service>

        <service id="app.form.type.policy.rule.mt" class="AppBundle\Form\Type\XslPolicyRuleMtFormType">
            <tag name="form.type" alias="xslPolicyRuleMt" />
        </service>

        <service id="app.form.type.display.import" class="AppBundle\Form\Type\DisplayImportFormType">
            <tag name="form.type" alias="displayImport" />
        </service>

        <service id="mco.directory_namer.policy" class="AppBundle\Lib\VichUploaderBundle\UserDirectoryNamer">
        </service>

        <service id="mco.xslpolicy.parser" class="AppBundle\Lib\XslPolicy\XslPolicyParser">
        </service>

        <service id="mco.xslpolicy.writer" class="AppBundle\Lib\XslPolicy\XslPolicyWriter">
        </service>

        <service id="mco.mediaconch.server" class="AppBundle\Lib\MediaConch\MediaConchServer" public="false">
            <argument>%app.mediaconch.address%</argument>
            <argument>%app.mediaconch.port%</argument>
            <argument>%app.mediaconch.api.version%</argument>
            <argument type="service" id="logger" />
            <argument type="service" id="mco.settings" />
        </service>

        <service id="mco.checker.analyze" class="AppBundle\Lib\Checker\CheckerAnalyze">
            <argument type="service" id="mco.mediaconch.server"/>
            <argument type="service" id="security.token_storage" />
        </service>

        <service id="mco.checker.status" class="AppBundle\Lib\Checker\CheckerStatus">
            <argument type="service" id="mco.mediaconch.server"/>
            <argument type="service" id="security.token_storage" />
        </service>

        <service id="mco.checker.validate" class="AppBundle\Lib\Checker\CheckerValidate">
            <argument type="service" id="mco.mediaconch.server"/>
            <argument type="service" id="security.token_storage" />
        </service>

        <service id="mco.checker.report" class="AppBundle\Lib\Checker\CheckerReport">
            <argument type="service" id="mco.mediaconch.server"/>
            <argument type="service" id="security.token_storage" />
        </service>

        <service id="mco.checker.filename" class="AppBundle\Lib\Checker\CheckerFilename">
            <argument type="service" id="mco.mediaconch.server"/>
            <argument type="service" id="security.token_storage" />
        </service>

        <service id="mco.policy.create" class="AppBundle\Lib\XslPolicy\XslPolicyCreate">
            <argument type="service" id="mco.mediaconch.server"/>
            <argument type="service" id="security.token_storage" />
        </service>

        <service id="mco.policy.save" class="AppBundle\Lib\XslPolicy\XslPolicySave">
            <argument type="service" id="mco.mediaconch.server"/>
            <argument type="service" id="security.token_storage" />
        </service>

        <service id="mco.policy.import" class="AppBundle\Lib\XslPolicy\XslPolicyImport">
            <argument type="service" id="mco.mediaconch.server"/>
            <argument type="service" id="security.token_storage" />
        </service>

        <service id="mco.policy.export" class="AppBundle\Lib\XslPolicy\XslPolicyExport">
            <argument type="service" id="mco.mediaconch.server"/>
            <argument type="service" id="security.token_storage" />
        </service>

        <service id="mco.policy.edit" class="AppBundle\Lib\XslPolicy\XslPolicyEdit">
            <argument type="service" id="mco.mediaconch.server"/>
            <argument type="service" id="security.token_storage" />
        </service>

        <service id="mco.policy.editType" class="AppBundle\Lib\XslPolicy\XslPolicyEditType">
            <argument type="service" id="mco.mediaconch.server"/>
            <argument type="service" id="security.token_storage" />
        </service>

        <service id="mco.policy.editVisibility" class="AppBundle\Lib\XslPolicy\XslPolicyEditVisibility">
            <argument type="service" id="mco.mediaconch.server"/>
            <argument type="service" id="security.token_storage" />
        </service>

        <service id="mco.policy.delete" class="AppBundle\Lib\XslPolicy\XslPolicyDelete">
            <argument type="service" id="mco.mediaconch.server"/>
            <argument type="service" id="security.token_storage" />
        </service>

        <service id="mco.policy.duplicate" class="AppBundle\Lib\XslPolicy\XslPolicyDuplicate">
            <argument type="service" id="mco.mediaconch.server"/>
            <argument type="service" id="security.token_storage" />
        </service>

        <service id="mco.policy.move" class="AppBundle\Lib\XslPolicy\XslPolicyMove">
            <argument type="service" id="mco.mediaconch.server"/>
            <argument type="service" id="security.token_storage" />
        </service>

        <service id="mco.policy.getPolicy" class="AppBundle\Lib\XslPolicy\XslPolicyGetPolicy">
            <argument type="service" id="mco.mediaconch.server"/>
            <argument type="service" id="security.token_storage" />
        </service>

        <service id="mco.policy.getPolicies" class="AppBundle\Lib\XslPolicy\XslPolicyGetPolicies">
            <argument type="service" id="mco.mediaconch.server"/>
            <argument type="service" id="security.token_storage" />
        </service>

        <service id="mco.policy.getPoliciesCount" class="AppBundle\Lib\XslPolicy\XslPolicyGetPoliciesCount">
            <argument type="service" id="mco.mediaconch.server"/>
            <argument type="service" id="security.token_storage" />
        </service>

        <service id="mco.policy.getPolicyName" class="AppBundle\Lib\XslPolicy\XslPolicyGetPolicyName">
            <argument type="service" id="mco.mediaconch.server"/>
            <argument type="service" id="security.token_storage" />
        </service>

        <service id="mco.policy.getPoliciesNamesList" class="AppBundle\Lib\XslPolicy\XslPolicyGetPoliciesNamesList">
            <argument type="service" id="mco.mediaconch.server"/>
            <argument type="service" id="security.token_storage" />
        </service>

        <service id="mco.policy.rule.create" class="AppBundle\Lib\XslPolicy\XslPolicyRuleCreate">
            <argument type="service" id="mco.mediaconch.server"/>
            <argument type="service" id="security.token_storage" />
        </service>

        <service id="mco.policy.rule.edit" class="AppBundle\Lib\XslPolicy\XslPolicyRuleEdit">
            <argument type="service" id="mco.mediaconch.server"/>
            <argument type="service" id="security.token_storage" />
        </service>

        <service id="mco.policy.rule.delete" class="AppBundle\Lib\XslPolicy\XslPolicyRuleDelete">
            <argument type="service" id="mco.mediaconch.server"/>
            <argument type="service" id="security.token_storage" />
        </service>

        <service id="mco.policy.rule.duplicate" class="AppBundle\Lib\XslPolicy\XslPolicyRuleDuplicate">
            <argument type="service" id="mco.mediaconch.server"/>
            <argument type="service" id="security.token_storage" />
        </service>

        <service id="mco.policy.rule.move" class="AppBundle\Lib\XslPolicy\XslPolicyRuleMove">
            <argument type="service" id="mco.mediaconch.server"/>
            <argument type="service" id="security.token_storage" />
        </service>

        <service id="mco.policy.getRule" class="AppBundle\Lib\XslPolicy\XslPolicyGetRule">
            <argument type="service" id="mco.mediaconch.server"/>
            <argument type="service" id="security.token_storage" />
        </service>

        <service id="mco.policy.fromFile" class="AppBundle\Lib\XslPolicy\XslPolicyFromFile">
            <argument type="service" id="mco.mediaconch.server"/>
            <argument type="service" id="security.token_storage" />
        </service>

        <service id="mco.policy.form.values" class="AppBundle\Lib\XslPolicy\XslPolicyFormValues">
            <argument type="service" id="mco.mediaconch.server"/>
            <argument type="service" id="security.token_storage" />
        </service>

        <service id="mco.settings" class="AppBundle\Lib\Settings\SettingsManager">
            <argument type="service" id="security.token_storage" />
            <argument type="service" id="doctrine.orm.entity_manager" />
        </service>

        <service id="mco.mailer.user" class="AppBundle\Mailer\UserMailer" public="false">
            <argument type="service" id="mailer" />
            <argument type="service" id="router" />
            <argument type="service" id="templating" />
            <argument type="collection">
                <argument key="confirmation.template">%fos_user.registration.confirmation.template%</argument>
                <argument key="resetting.template">%fos_user.resetting.email.template%</argument>
                <argument key="from_email" type="collection">
                    <argument key="confirmation">%fos_user.registration.confirmation.from_email%</argument>
                    <argument key="resetting">%fos_user.resetting.email.from_email%</argument>
                </argument>
                <argument key="absolute_url_for_mail">%app.mediaconch.absolute_url_for_mail%</argument>
            </argument>
        </service>

        <service id="mco.guest.register.form" factory-method="createNamed" factory-service="form.factory" class="Symfony\Component\Form\Form">
            <argument>%fos_user.profile.form.name%</argument>
            <argument>mco_guest_register</argument>
            <argument>null</argument>
            <argument type="collection">
                <argument key="validation_groups">%fos_user.profile.form.validation_groups%</argument>
            </argument>
        </service>

        <service id="mco.guest.register.form.type" class="MediaConchOnline\Bundle\UserBundle\Form\Type\GuestRegisterFormType">
            <argument>%fos_user.model.user.class%</argument>
            <tag name="form.type" alias="mco_guest_register" />
        </service>

        <service id="mco.guest.register.form.handler.default" class="MediaConchOnline\Bundle\UserBundle\Form\Handler\GuestRegisterFormHandler" scope="request" public="false">
            <argument type="service" id="mco.guest.register.form" />
            <argument type="service" id="request" />
            <argument type="service" id="fos_user.user_manager" />
            <argument type="service" id="fos_user.mailer" />
            <argument type="service" id="fos_user.util.token_generator" />
        </service>

        <service id="mco.security.authentication.rememberme.services.simplehash" alias="security.authentication.rememberme.services.simplehash.main" public="true" />

        <service id="mco.guest.authentication" class="AppBundle\EventListener\GuestListener">
            <argument>%fos_user.firewall_name%</argument>
            <argument type="service" id="security.authorization_checker"/>
            <argument type="service" id="security.token_storage" />
            <argument type="service" id="mco.security.authentication.rememberme.services.simplehash" />
            <tag name="kernel.event_listener" event="kernel.controller" method="guestAuthentication" />
            <tag name="kernel.event_listener" event="kernel.response" method="rememberMeGuestCookie" />
        </service>

        <service id="mco.rememberme.cookie.update" class="AppBundle\EventListener\RememberMeCookieUpdateListener">
            <argument type="service" id="security.token_storage" />
            <argument type="service" id="mco.security.authentication.rememberme.services.simplehash" />
            <tag name="kernel.event_listener" event="security.interactive_login" method="onSecurityInteractiveLogin" />
            <tag name="kernel.event_listener" event="kernel.response" method="rememberMeUpdateCookie" />
        </service>
    </services>
</container>
