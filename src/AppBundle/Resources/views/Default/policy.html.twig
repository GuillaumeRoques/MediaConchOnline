{% extends 'AppBundle:Default:base.html.twig' %}

{% block title %}
MediaConch Demo policy management
{% endblock %}

{% block body %}
<h1>MediaConch Demo policy management</h1>

{% if form %}
    {% form_theme form 'AppBundle:form:PolicyItemRow.html.twig' %}
    {{ form_start(form) }}
        {{ form_errors(form) }}

        <div>
            {{ form_row(form.name) }}
        </div>

        <div>
            <ul class="items" data-prototype="{{ form_widget(form.items.vars.prototype)|e }}">
            {% for item in form.items %}
                <li class="item"><div id="policy_items_0">{{ form_row(item.type) }} {{ form_row(item.field) }} {{ form_row(item.validator) }} {{ form_row(item.value) }}</div></li>
            {% endfor %}
            </ul>
        </div>
    {{ form_end(form) }}
{% endif %}
<br /><br />
<div>
Policy list :
    <ul>
    {% for item in policyList %}
        <li><a href="{{ path('app_default_policy', {'id': item.id}) }}">{{ item.name }}</a> (<a href="{{ path('app_default_policydelete', {'id': item.id}) }}">Delete</a>)</li>
    {% endfor %}
    </ul>
</div>
{% endblock %}

{% block javascripts %}
<script>
function changeType(id) {
    var $type = $('#policy_items_' + id + '_type');
    // When sport gets selected ...
    $type.change(function() {
        // Simulate form data, but only include the selected sport value.
        var data = {};
        data['type'] = $type.val();
        // Submit data via AJAX to the form's action path.
        $.ajax({
            url : "{{ path('app_default_policyajaxfields') }}",
            type: "POST",
            data : data,
            success: function(data) {
                $('#policy_items_' + id + '_field').html('');
                $.each(data, function(k, v) {
                    $('#policy_items_' + id + '_field').append('<option value="' + k + '">' + v + '</option>');
                });
            }
        });
    });
}

function changeField(id) {
    var $field = $('#policy_items_' + id + '_field');
    // When sport gets selected ...
    $field.change(function() {
        // Simulate form data, but only include the selected sport value.
        var data = {};
        data['field'] = $field.val();
        // Submit data via AJAX to the form's action path.
        $.ajax({
            url : "{{ path('app_default_policyajaxvalidators') }}",
            type: "POST",
            data : data,
            success: function(data) {
                $('#policy_items_' + id + '_validator').html('');
                $.each(data, function(k, v) {
                    $('#policy_items_' + id + '_validator').append('<option value="' + k + '">' + v + '</option>');
                });
            }
        });
    });
}

// Récupère le div qui contient la collection d'items
var collectionHolder = $('ul.items');
// ajoute un lien « add a tag »
var addTagLink = $('<a href="#" class="add_tag_link">Add a new policy item</a>');
var newLinkLi = $('<li></li>').append(addTagLink);

$(document).ready(function() {
    // ajoute l'ancre « ajouter un item » et li à la balise ul
    collectionHolder.append(newLinkLi);

    // ajoute un lien de suppression à tous les éléments li de
    // formulaires d'items existants
    var i = 0;
    collectionHolder.find('li.item div').each(function() {
        changeType(i);
        changeField(i++);
        addItemFormDeleteLink($(this));
    });

    addTagLink.on('click', function(e) {
        // empêche le lien de créer un « # » dans l'URL
        e.preventDefault();

        // ajoute un nouveau formulaire tag (voir le prochain bloc de code)
        addItemForm(collectionHolder, newLinkLi);
    });
});

function addItemForm(collectionHolder, newLinkLi) {
    // Récupère l'élément ayant l'attribut data-prototype comme expliqué plus tôt
    var prototype = collectionHolder.attr('data-prototype');

    // Remplace '__name__' dans le HTML du prototype par un nombre basé sur
    // la longueur de la collection courante
    var itemID = collectionHolder.children().length - 1;
    var newForm = prototype.replace(/__name__/g, itemID);

    // Affiche le formulaire dans la page dans un li, avant le lien "ajouter un tag"
    var newFormLi = $('<li></li>').append(newForm);
    newLinkLi.before(newFormLi);

    // ajoute un lien de suppression au nouveau formulaire
    var itemFormLi = collectionHolder.find('li div').last();
    addItemFormDeleteLink(itemFormLi);

    changeType(itemID);
    changeField(itemID);
}

function addItemFormDeleteLink(itemFormLi) {
    var removeFormA = $('<a href="#">Delete this policy item</a>');
    itemFormLi.append(removeFormA);

    removeFormA.on('click', function(e) {
        // empêche le lien de créer un « # » dans l'URL
        e.preventDefault();

        // supprime l'élément li pour le formulaire de tag
        itemFormLi.parent().remove();
    });
}
</script>
{% endblock %}

{% block stylesheets %}
<style>
.form-control {
    display: inline;
    width: auto;
}
</style>
{% endblock %}
