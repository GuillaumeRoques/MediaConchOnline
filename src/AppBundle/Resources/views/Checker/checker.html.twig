{% extends 'AppBundle:Default:base.html.twig' %}

{% block title %}
MediaConch checker
{% endblock %}

{% block body %}
<div class="col-md-12" id="checkerResultTitle">
    <h1>Check files</h1>
    <button type="button" class="close{% if not selectForm %} hidden{% endif %}">&times; Close all results</button>
</div>

<div class="col-md-12">
    <!-- Nav tabs -->
    <ul class="nav nav-tabs" role="tablist">
        <li role="presentation" class="{% if selectForm == 'upload' %}active{% endif %}"><a href="#file" aria-controls="file" role="tab" data-toggle="tab">Check by file upload</a></li>
        <li role="presentation" class="{% if selectForm == 'online' %}active{% endif %}"><a href="#url" aria-controls="url" role="tab" data-toggle="tab">Check online files</a></li>
        <li role="presentation" class="{% if selectForm == 'repository' or not selectForm %}active{% endif %}"><a href="#repository" aria-controls="repository" role="tab" data-toggle="tab">Check server files</a></li>
    </ul>

    <!-- Tab panes -->
    <div class="tab-content">
        <div role="tabpanel" class="tab-pane panel col-md-12{% if selectForm == 'upload' %} active{% endif %}" id="file">
            {% if formUpload is defined and formUpload %}
                {% form_theme formUpload 'bootstrap_3_horizontal_layout.html.twig' %}
                {{ form_start(formUpload) }}
                <div class="col-md-6">{{ form_row(formUpload.policy) }}</div>
                <div class="col-md-6">{{ form_row(formUpload.display) }}</div>
                <div class="col-md-10">{{ form_row(formUpload.file) }}</div>
                <div class="col-md-2">{{ form_row(formUpload.check) }}</div>
                {{ form_end(formUpload) }}
            {% else %}
                {{ include('AppBundle:Default:quotaExceeded.html.twig') }}
            {% endif %}
        </div>
        <div role="tabpanel" class="tab-pane panel col-md-12{% if selectForm == 'online' %} active{% endif %}" id="url">
            {% if formOnline is defined and formOnline %}
                {% form_theme formOnline 'bootstrap_3_horizontal_layout.html.twig' %}
                {{ form_start(formOnline) }}
                <div class="col-md-6">{{ form_row(formOnline.policy) }}</div>
                <div class="col-md-6">{{ form_row(formOnline.display) }}</div>
                <div class="col-md-10">{{ form_row(formOnline.file) }}</div>
                <div class="col-md-2">{{ form_row(formOnline.check) }}</div>
                {{ form_end(formOnline) }}
            {% else %}
                {{ include('AppBundle:Default:quotaExceeded.html.twig') }}
            {% endif %}
        </div>
        <div role="tabpanel" class="tab-pane panel col-md-12{% if selectForm == 'repository' or not selectForm %} active{% endif %}" id="repository">
            {% if formRepository is defined and formRepository %}
                {% form_theme formRepository 'bootstrap_3_horizontal_layout.html.twig' %}
                {{ form_start(formRepository) }}
                <div class="col-md-6">{{ form_row(formRepository.policy) }}</div>
                <div class="col-md-6">{{ form_row(formRepository.display) }}</div>
                <div class="col-md-10"></div>
                <div class="col-md-2">{{ form_widget(formRepository.check) }}</div>
                {{ form_end(formRepository) }}
            {% elseif repositoryEnable is defined and repositoryEnable %}
                {{ include('AppBundle:Default:quotaExceeded.html.twig') }}
            {% endif %}
        </div>
    </div>
</div>

<div class="col-md-12">
{% if checks is iterable %}
    {{ include('AppBundle:Checker:fileDetailCheckerTable.html.twig', { 'checks': checks, 'selectForm': selectForm }) }}
{% endif %}
</div>
{% endblock %}

{% block javascripts %}
    {% if checks is iterable %}
        <script src="/static/FileSaver.min.js"></script>
        <script>
            $(document).ready(function() {
                // Add download button to result list
                $('.checker-results a.results-dld').each(function() {
                    $(this).on('click', function(e) {
                        e.preventDefault(); // Don't put a « # » in URL
                        downloadReport($(this));
                    });
                });

                // Add download button binding on modal
                $('.modal-footer .report-dld').each(function () {
                    $(this).on('click', function(e) {
                        downloadReport($(this));
                    });
                });

                function downloadReport(item) {
                    if (0 < $(item.data('target')).find('div.modal-body').length) {
                        report = $(item.data('target')).find('div.modal-body').text().trim();
                    }
                    else {
                        report = $(item.data('target')).text().trim();
                    }
                    reportName = $(item).data('save-name');
                    reportExt = reportName.replace(/(.*)\.([a-z]{3})$/, "$2");
                    switch(reportExt) {
                        case 'xml':
                            reportType = 'text/xml';
                            break;
                        case 'txt':
                            reportType = 'text/plain';
                            break;
                        case 'html':
                            reportType = 'text/html';
                            break;
                        default:
                            reportType = 'text/plain';
                    }
                    var blob = new Blob([report], {type: reportType + ';charset=utf-8'});
                    saveAs(blob, reportName);
                };

                // Add download trace button to result list
                $('.checker-results a.results-dld-trace').each(function() {
                    $(this).on('click', function(e) {
                        e.preventDefault(); // Don't put a « # » in URL
                        downloadTrace($(this));
                    });
                });

                // Add download trace button binding on modal
                $('.modal-footer .report-dld-trace').each(function() {
                    $(this).on('click', function(e) {
                        downloadTrace($(this));
                    });
                });

                function downloadTrace(item) {
                    report = $(item.data('target')).text().trim();
                    reportName = $(item).data('save-name');
                    var blob = new Blob([report], {type: 'text/xml;charset=utf-8'});
                    saveAs(blob, reportName);
                };

                // Add download trace ajax button to result list
                $('.checker-results a.results-dld-trace-ajax').each(function() {
                    $(this).on('click', function(e) {
                        e.preventDefault(); // Don't put a « # » in URL
                        downloadTraceAjax($(this));
                    });
                });

                // Add download trace ajax button binding on modal
                $('.modal-footer .report-dld-trace-ajax').each(function() {
                    $(this).on('click', function(e) {
                        downloadTraceAjax($(this));
                    });
                });

                function downloadTraceAjax(item) {
                    id = $(item).data('target').replace(/#traceXml(\d)/, "$1");
                    url = '{{ path('app_checker_checkerajaxtracefolder', {'id': 0, 'format': 'xml'}) }}';
                    url = url.replace(/(.*)\/(0)/, "$1/" + id);
                    $.get(url)
                        .done(function (d) {
                            reportName = $(item).data('save-name');
                            var blob = new Blob([d], {type: 'text/xml;charset=utf-8'});
                            saveAs(blob, reportName);
                        })
                        .fail(function () {
                            console.log('Fail to get trace XML');
                        });
                };

                // Add download MediaInfo button to result list
                $('.checker-results a.results-dld-info').each(function() {
                    $(this).on('click', function(e) {
                        e.preventDefault(); // Don't put a « # » in URL
                        downloadInfo($(this));
                    });
                });

                // Add download MediaInfo button binding on modal
                $('.modal-footer .report-dld-info').each(function() {
                    $(this).on('click', function(e) {
                        downloadInfo($(this));
                    });
                });

                function downloadInfo(item) {
                    report = $(item.data('target')).text().trim();
                    reportName = $(item).data('save-name');
                    var blob = new Blob([report], {type: 'text/xml;charset=utf-8'});
                    saveAs(blob, reportName);
                };

                // Add download MediaInfo ajax button to result list
                $('.checker-results a.results-dld-info-ajax').each(function() {
                    $(this).on('click', function(e) {
                        e.preventDefault(); // Don't put a « # » in URL
                        downloadInfoAjax($(this));
                    });
                });

                // Add download MediaInfo ajax button binding on modal
                $('.modal-footer .report-dld-info-ajax').each(function() {
                    $(this).on('click', function(e) {
                        downloadInfoAjax($(this));
                    });
                });

                function downloadInfoAjax(item) {
                    id = $(item).data('target').replace(/#infoXml(\d)/, "$1");
                    url = '{{ path('app_checker_checkerajaxinfofolder', {'id': 0, 'format': 'xml'}) }}';
                    url = url.replace(/(.*)\/(0)/, "$1/" + id);
                    $.get(url)
                        .done(function (d) {
                            reportName = $(item).data('save-name');
                            var blob = new Blob([d], {type: 'text/xml;charset=utf-8'});
                            saveAs(blob, reportName);
                        })
                        .fail(function () {
                            console.log('Fail to get MediaInfo XML');
                        });
                };

                // Remove result block
                $('.checker-results .result-close').each(function() {
                    $(this).click(function () {
                        $(this).parent().parent().remove();

                        // Remove close all button
                        if (0 == $('table.checker-results tbody tr').length) {
                            $('#checkerResultTitle .close').addClass('hidden');
                        };
                    });
                });

                // Remove all results blocks
                $('#checkerResultTitle .close').click(function () {
                    $('table.checker-results tbody tr').each(function () {
                        $(this).remove();
                    });

                    // Remove close all button
                    $(this).addClass('hidden');
                });

                // Alert user when they leave checker page with results
                $('.nav.navbar a').each(function() {
                    $(this).click(function (e) {
                        // Check if there is close all button
                        if (0 < $('table.checker-results tbody tr').length) {
                            choice = confirm('Are you sure ?\nAll analysis results will be discarded!');
                            if (choice == false) {
                                e.preventDefault();
                            }
                        };
                    });
                });
            });
        </script>

        <script src="//cdnjs.cloudflare.com/ajax/libs/jstree/3.2.1/jstree.min.js"></script>
        <script src="/static/jstreegrid.js"></script>
        <script>
        {% for check in checks %}
        $('#modalTrace{{ loop.index }}').on('show.bs.modal',
            function() {
                $('#trace{{ loop.index }}').jstree({
                    'core' : {
                        'check_callback' : function (operation, node, parent, position, more) {
                            if (operation === 'copy_node' || operation === 'move_node') {
                                return false; // disable copy and move
                            }
                            else {
                                return true;
                            }
                        },
                        'multiple' : false,
                        'dblclick_toggle' : false,
                        {% if selectForm == 'repository' %}
                            'data' : {'url' : '{{ path('app_checker_checkerajaxtracefolder', {'id': loop.index, 'format': 'jstree'}) }}', 'dataType' : 'json'}
                        {% else %}
                            'data' : {{ check.getTrace.jstree|raw }}
                        {% endif %}
                    },
                    "plugins" : ['search', 'types', 'grid'],
                    'types' : {
                        'default' : {'icon' : 'glyphicon glyphicon-folder-open'},
                        'block' : {'icon' : 'glyphicon glyphicon-folder-open'},
                        'data' : {'icon' : 'glyphicon glyphicon-file'},
                    },
                    grid: {
                        columns: [
                            {header: "Offset", value: "offset"},
                            {header: "Key", tree: true},
                            {header: "Value", value: "dataValue"},
                        ],
                        resizable: true,
                    },
                })
            });

            $('#trace{{ loop.index }}').on('ready.jstree', function () {
                $(function () {
                    var to = false;
                    $('#traceSearch{{ loop.index }}').keyup(function () {
                        if(to) { clearTimeout(to); }
                        to = setTimeout(function () {
                            var v = $('#traceSearch{{ loop.index }}').val();
                            $('#trace{{ loop.index }}').jstree(true).search(v);
                        }, 250);
                    });
                });
            });

            $('#trace{{ loop.index }}').on('loaded.jstree', function (e, data) {
                data.instance.get_container().find('li').each(function () {
                    data.instance.open_node($(this));
                })
            });

            $('#trace{{ loop.index }}').on('select_node.jstree', function (e, data) {
                data.instance.toggle_node(data.node);
            });

        $('#modalInfo{{ loop.index }}').on('show.bs.modal',
            function() {
                $('#info{{ loop.index }}').jstree({
                    'core' : {
                        'check_callback' : function (operation, node, parent, position, more) {
                            if (operation === 'copy_node' || operation === 'move_node') {
                                return false; // disable copy and move
                            }
                            else {
                                return true;
                            }
                        },
                        'multiple' : false,
                        'dblclick_toggle' : false,
                        {% if selectForm == 'repository' %}
                            'data' : {'url' : '{{ path('app_checker_checkerajaxinfofolder', {'id': loop.index, 'format': 'jstree'}) }}', 'dataType' : 'json'}
                        {% else %}
                            'data' : {{ check.getInfo.jstree|raw }}
                        {% endif %}
                    },
                    "plugins" : ['search', 'types', 'grid'],
                    'types' : {
                        'default' : {'icon' : 'glyphicon glyphicon-folder-open'},
                        'block' : {'icon' : 'glyphicon glyphicon-folder-open'},
                        'data' : {'icon' : 'glyphicon glyphicon-file'},
                    },
                    grid: {
                        columns: [
                            {header: "Key", tree: true},
                            {header: "Value", value: "dataValue"},
                        ],
                        resizable: true,
                    },
                })
            });

            $('#info{{ loop.index }}').on('ready.jstree', function () {
                $(function () {
                    var to = false;
                    $('#infoSearch{{ loop.index }}').keyup(function () {
                        if(to) { clearTimeout(to); }
                        to = setTimeout(function () {
                            var v = $('#infoSearch{{ loop.index }}').val();
                            $('#info{{ loop.index }}').jstree(true).search(v);
                        }, 250);
                    });
                });
            });

            $('#info{{ loop.index }}').on('loaded.jstree', function (e, data) {
                data.instance.open_all();
            });

            $('#info{{ loop.index }}').on('select_node.jstree', function (e, data) {
                data.instance.toggle_node(data.node);
            });
        {% endfor %}
        </script>
    {% endif %}
{% endblock %}

{% block stylesheets %}
    {% if checks is iterable %}
        <link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/jstree/3.2.1/themes/default/style.min.css" />
    {% endif %}
{% endblock %}
